modu str {
   fun join(joiner, strings) {
        var finalStr = strings[0];
        for (strings.skip(1)) {
            finalStr += joiner + it;
        }
        ret finalStr;
    }
    
    fun ends_with(str, find) {
        var len_str = str.len();
        var len_find = find.len();
        if(len_find > len_str) {
            ret false;
        }
        
        var c = 0;
        for(len_str - len_find..len_str - 1) {
            if(str[ix] != find[c]) {
                ret false;
            }
            c++;
        }
        ret true;
    }
    
    fun starts_with(str, find) {
        var len_str = str.len();
        var len_find = find.len();
        if(len_find > len_str) {
            ret false;
        }
        
        var c = 0;
        for(0..len_find - 1) {
            if(str[ix] != find[c]) {
                ret false;
            }
            c++;
        }
        ret true;
    }
    
    fun trim_start(str) {
        var new = "";
        var foundStart = false;
        for (str) {
            if(!foundStart) {
                if(it == ' ') {
                    continue;
                } else if (it != ' ') {
                    foundStart = true;
                }
            }
            new += it;
        }
        ret new;
    }
    
    fun trim_end(str) {
        var new = "";
        var lastIndex = -1;
        var len = str.len();
        for ~(len-1..0) {
            if(str[ix] == ' ') {
                continue;
            } else if (str[ix] != ' ') {
                lastIndex = ix + 1;
                break;
            }
        }
        ret str.view(0, lastIndex);
    }
    
    fun trim(str) {
        ret str::trim_end(str::trim_start(str));
    }
}