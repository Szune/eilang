modu std {
    typ oth {
        other: string;
        ctor(other);
        
        fun write() {
            println('writing from within oth');
        }
    }
	typ cmd {
		arg, val: string;
		ctor(arg, val);
		
		fun init() {
		    arg = *std::oth('hello world from typ oth');
		}
		
		fun init2() {
		    arg = ['oops, init2 works wow cool'];
		}
	}

	typ argparse {
		fun parse() {
			var en = *env();
			var args = en.get_args();
			var cmds = [];
			#println(args.len());
			if(args.len() == 1) {
				ret cmds;
			}
			if(args.len() == 2) {
				cmds.add(*std::cmd(args[1], ""));
				ret cmds;
			}
			for (0..(args.len() - 1)) {
			    cmds.add(*std::cmd(args[it], ""));
				#println(args[it]);
			}

			ret cmds;
		}
	}
}


fun printTwo(first, last) {
    println(first);
    println(last);
}


fun main() {
    printTwo('hello', 'world');
	var parser = *std::argparse();
	var parsed = parser.parse();
	
	var d = [];
	d.add(['hello everybody wow yes']);
	println(d[0][0]);
	
	var dd = [];
	dd.add(*std::cmd());
	dd[0].init2();
	#println(dd[0].arg[0]);
	
	
	var nlst = [];
	nlst.add('hej');
	println(nlst[0]);
	nlst[0] = 'd√•';
	println(nlst[0]);
	
	var lst = [];
	lst.add(*std::cmd());
	println(lst.len());
	lst[0].init();
	println(lst[0]);
	println('after lst[0].init();');
	
	println(lst[0].arg.other);
	lst[0].arg.write();
	
	for (0..(parsed.len() - 1)) {
	    println(parsed[it].arg);
	}
	
    #+
    var n = *net();
    n.get();
    n.post();
    n.head();
    var f = *file('x.txt');
    var d = *dir('/home/erik/Desktop');
    -#
    
    #+
        block comment
    -#
    # for loopers
    for(0..-1)
    {
        println('test');
    }

    for (1..6) 
    {   
        println(it);
    }
    var b = 1;
    var e = 3;
    for (b..e)
    {
        println(it);
    }
    #+
    for (1..6) {
        println(f'[{it_idx}] has value {it}');
        println('[' + it_idx + '] has value ' + it); # auto loop index variable?
        pointless(it); # auto variable
    }
    for (i : 1..6) {
        pointless(i); # named variable
    }

    for (val, idx : 1..6) {
        println(idx + ' has value ' + val);
        pointless(val);
    }
    var n = 10;
    for (1..n) {

    }
    for(array) {
        println(it);
    }
    for(i: array) {
        println(it);
    }
    -#
}
