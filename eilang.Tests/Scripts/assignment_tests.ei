typ test {
    val1: string;
    val2: test2;
    ctor(val1, val2);
    
    fun get() {
        ret *test2("baz", "bah");
    }
}


typ test2 {
    val3, val4: any;
    ctor(val3, val4);
}

fun testfun() {
    println("testing");
}

fun member_assignment_tests() {
    var test = *test("foo", *test2("bar", "baz"));
    println("test.val1 = " + test.val1);
    assert(test.val1 == "foo", "expected test.val1 to be 'foo' but was " + test.val1);
    test.val1 += "bar";
    println("test.val1 = " + test.val1);
    assert(test.val1 == "foobar", "expected test.val1 to be 'foobar' but was " + test.val1);
    test.val1 = "muhbar";
    println("test.val1 = " + test.val1);
    println("test.val2.val3 = " + test.val2.val3);
    test.val2.val3 = "_moo_";
    assert(test.val2.val3 == "_moo_", "expected test.val2.val3 to be '_moo_' but was " + test.val2.val3);
    println("test.val2.val3 = " + test.val2.val3);

}

fun main() {
    # Assignment tests
    member_assignment_tests();
    
    var lst = [*test('one', *test2('two', ['hello']))];
    println("lst = " + lst);
    lst[0].val2.val3 = "bus";
    assert(lst[0].val2.val3 == "bus", 'lst[0].val2.val3 was expected to be "bus" but was ' + lst[0].val2.val3);
    println("lst = " + lst);
    lst[0].val2.val4[0] += ' world';
    assert(lst[0].val2.val4[0] == 'hello world', 'lst[0].val2.val4[0] was expected to be "hello world" but was ' + lst[0].val2.val4[0]);
    println("lst = " + lst);
    lst[0] = 'bye';
    assert(lst[0] == 'bye', 'expected lst[0] to be "bye" but was ' + lst[0]);
    println(lst);
    lst = 'hello';
    assert(lst == 'hello', 'expected lst to be "hello" but was ' + lst);
    println(lst);
    lst += ' world';
    assert(lst == 'hello world', 'expected lst to be "hello world" but was ' + lst);
    println(lst);
    
    println("*test('1','2').get().val3 = " + *test('1','2').get().val3);
    testfun();
    
    println("*test('1',*test2(['test2'],'3')).val2.val3[0] = " + *test('1',*test2(['test2'],'3')).val2.val3[0]);
    
    for(1..4) {
        println("it = " + ix);
    }
    
    var manyIndices = [];
    manyIndices.add([]);
    manyIndices[0].add(1);
    println("manyIndices[0][0] = " + manyIndices[0][0]);
    manyIndices[0][0] = 5;
    println("manyIndices[0][0] = " + manyIndices[0][0]);
    assert(manyIndices[0][0] == 5, 'expected manyIndices[0][0] to be 5 but was ' + manyIndices[0][0]);
    manyIndices[0][0] += 5;
    assert(manyIndices[0][0] == 10, 'expected manyIndices[0][0] to be 10 but was ' + manyIndices[0][0]);
    
    var mod = 10;
    mod %= 2;
    assert(mod == 0, $'expected 10 % 2 to be 0 but was {mod}');
    
    var mod2 = 11;
    mod2 %= 2;
    assert(mod2 == 1, $'expected 11 % 2 to be 1 but was {mod2}');
}